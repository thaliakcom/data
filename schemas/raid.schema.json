{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/UnprocessedRaidData",
  "definitions": {
    "UnprocessedRaidData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "minimum": 0,
          "description": "The ID of the encounter. Must be a valid encounter in `ContentFinderCondition`. Note that multiple encounters can use the same encounter ID, for instance for two-phase fights (with a door boss). See  {@link  suffix } ."
        },
        "sort_id": {
          "type": "integer",
          "minimum": 0,
          "description": "Normally, encounters are sorted by their `id` value in lists. However, sometimes an encounter has a higher ID than its successor encounter(s). In that case, you can use this field to override the `id` value for use in encounter sorts only."
        },
        "patch": {
          "type": "string",
          "description": "Which patch the encounter was first released in."
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date this encounter page was first created."
        },
        "modified": {
          "type": "string",
          "format": "date",
          "description": "The date this encounter page was last modified."
        },
        "by": {
          "anyOf": [
            {
              "$ref": "#/definitions/Contributor"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contributor"
              }
            }
          ],
          "description": "The contributor or contributor data. Can't be an empty array."
        },
        "tier": {
          "type": "string",
          "description": "A text value representing the \"tier\" of the encounter. If supplied, all encounters with a matching tier value will be grouped."
        },
        "boss": {
          "type": "string",
          "description": "The English name of the main boss that is fought in this encounter."
        },
        "name": {
          "type": "string",
          "description": "Can be used to override the name of the encounter. Note that the encounter name is automatically retrieved from the API, so usage of this field is strongly discouraged."
        },
        "suffix": {
          "type": "string",
          "description": "A suffix that will be attached to the name of the encounter. Useful in two-part fights."
        },
        "HP": {
          "type": "integer",
          "minimum": 0,
          "description": "The exact maximum HP value of the boss fought in this encounter."
        },
        "average_hp": {
          "type": "integer",
          "minimum": 0,
          "description": "The average HP value of all party members *on content*. Used to deliver information about required mitigation and healing."
        },
        "requiredDPS": {
          "type": "integer",
          "minimum": 0,
          "description": "Can be used to override the amount of DPS required to beat the encounter. Note that the required DPS is automatically calculated from the `HP` value and the time of the enrage hit in the `timeline`, so usage of this field is strongly discouraged."
        },
        "autos": {
          "type": "object",
          "properties": {
            "mechanic": {
              "$ref": "#/definitions/MechanicType",
              "description": "What target type the auto-attacks use. Must be one of the values from `mechanic-types.yaml`."
            },
            "shape": {
              "$ref": "#/definitions/ShapeType",
              "description": "What shape the auto-attacks are. Must be one of the values from `mechanic-shapes.yaml`."
            },
            "type": {
              "$ref": "#/definitions/DamageType",
              "description": "What damage type the auto-attacks use. Must be one of the values from `damage-types.yaml`."
            }
          },
          "required": [
            "mechanic",
            "type"
          ],
          "additionalProperties": false,
          "description": "Information about the auto-attacks in this instance, if applicable."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the encounter that will be displayed at the top of the page. Do not use this field to go into detail on mechanics."
        },
        "wip": {
          "type": "boolean",
          "description": "If set, this encounter will be included in encounter lists, but the actual encounter page will be replaced by a generic page informing users that the encounter guide is still a work-in-progress."
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UnprocessedStatusEffect"
          },
          "description": "The status effects that appear in this encounter. Each status effect is either its game data ID or (if there is no game data entry for it) a unique string representing the status effect, and a data object further describing it."
        },
        "actions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UnprocessedAction"
          },
          "description": "The actions (mechanics) that appear in this encounter. Each action is either its game data ID or (if there is no game data entry for it) a unique string representing the action, and a data object further describing it."
        },
        "timeline": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/UnprocessedTimelineItem"
              },
              {
                "$ref": "#/definitions/SpecialTimelineItem"
              }
            ]
          },
          "description": "The entire timeline of the fight, referencing actions from `actions`."
        },
        "macros": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Macro"
          },
          "description": "Macros that can be copied and pasted into the FFXIV in-game macro editor and describe some set of strats."
        },
        "graphing": {
          "$ref": "#/definitions/Graphing",
          "description": "The graphing information. Can be supplied to create diagrams."
        },
        "spoiler": {
          "type": "boolean",
          "description": "If set, this encounter will be marked as a spoiler encounter. Spoiler encounters will have their image blurred in any listing in which it appears until the user hovers over the encounter or disables spoiler blurring in the settings menu."
        }
      },
      "required": [
        "id",
        "patch",
        "date",
        "modified",
        "by",
        "boss",
        "description"
      ],
      "additionalProperties": false
    },
    "Contributor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "minimum": 0,
          "description": "The lodestone ID of the contributor."
        },
        "role": {
          "type": "string",
          "enum": [
            "author",
            "editor",
            "helper"
          ],
          "description": "The role of the contributor.\n* Authors write large parts of the timeline themselves.\n* Editors are responsible for proofchecking a finished timeline and   making small corrections like fixing links, typos, damage numbers,   and mechanical inaccuracies.\n* Helpers help research the internals of the fight's mechanics but   are otherwise not involved in the writing process."
        }
      },
      "required": [
        "id",
        "role"
      ],
      "additionalProperties": false
    },
    "MechanicType": {
      "type": "string",
      "enum": [
        "raidwide",
        "raidwide.lb",
        "raidwide.proximity",
        "raidwide.sethp",
        "raidwide.transition",
        "tb.tether",
        "tb.mt",
        "tb.ot",
        "tb.double",
        "tb.towers",
        "tb.stack",
        "tb.far",
        "tb.far.stack",
        "tb.close",
        "tb.close.stack",
        "auto.single",
        "auto.double",
        "auto.stack",
        "auto.close",
        "auto.far",
        "stack.party",
        "stack.partner",
        "stack.enumeration",
        "stack.role",
        "stack.healers",
        "stack.targeted",
        "stack.far",
        "stack.close",
        "stack.ululation",
        "stack.intercept",
        "stack.tower",
        "aoe",
        "aoe.baitable",
        "aoe.exaflares",
        "aoe.rotating",
        "aoe.expanding",
        "aoe.expanding.rings",
        "aoe.intercept",
        "aoe.chasing",
        "aoe.linger",
        "aoe.memory",
        "spread",
        "spread.close",
        "spread.far",
        "spread.tethers",
        "adds",
        "mech",
        "mech.phase",
        "mech.trio",
        "mech.check",
        "mech.status",
        "mech.statusoff",
        "mech.protean",
        "mech.store",
        "mech.gaze",
        "mech.los",
        "mech.limit",
        "mech.failure",
        "mech.distance",
        "mech.tether.far",
        "mech.tether.close",
        "mech.tether.distance",
        "mech.knockback",
        "mech.knockback.unavoidable",
        "mech.pull",
        "mech.pull.unavoidable",
        "mech.stillness",
        "mech.motion",
        "mech.arena",
        "mech.prepare",
        "towers.single",
        "towers.double",
        "towers.triple",
        "enrage",
        "enrage.threshold",
        "enrage.soft",
        "hint"
      ]
    },
    "ShapeType": {
      "type": "string",
      "enum": [
        "chariot",
        "defamation",
        "dynamo",
        "cone",
        "270Â°",
        "line",
        "plus",
        "cross",
        "sides",
        "rect",
        "frontal",
        "rear",
        "side"
      ]
    },
    "DamageType": {
      "type": "string",
      "enum": [
        "physical",
        "magic",
        "dark",
        "mixed"
      ]
    },
    "UnprocessedStatusEffect": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "If specified, will use this ID to retrieve additional information about the status from game data. If not specified, will use the key of this status instead.\n\nNote that timeline items and in-text references still use the key of the status to retrieve additional action data.\n\nWhile not necessary, using this field is generally recommended to \"alias\" statuses used in the fight to make the timeline easier to read and maintain."
        },
        "name": {
          "type": "string",
          "description": "Can be used to override the name of the status effect. Note that the status name is automatically retrieved from game data based on the status ID, so overriding this value is only necessary if there is no game data entry for this status, or when the game data name is incorrect."
        },
        "icon": {
          "type": "number",
          "description": "The icon ID of the status effect. Note that this ID is automatically retrieved from game data, so explicitly defining it is strongly discouraged."
        },
        "duration": {
          "anyOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              }
            }
          ],
          "description": "How long the status effect lasts (in milliseconds). If the status effect has multiple variations with different durations, you can supply an array instead of a single number here. If the status effect does not have a fixed duration (and therefore lasts indefinitely or until cleared by another mechanic), leave this field blank."
        },
        "type": {
          "$ref": "#/definitions/StatusType",
          "description": "The type of the status effect. Must be one of the values from `status-types.yaml`. Leave blank if none of these apply."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the status effect."
        },
        "tick": {
          "type": "integer",
          "minimum": 0,
          "description": "If this status effect represents a damage-over-time debuff, this field can be used to specify its damage per tick."
        },
        "gameDescription": {
          "type": "string",
          "description": "The in-game text of the status effect that appears when you hover over the effect. Note that this value is automatically retrieved from game data, so explicitly defining it here is strongly discouraged."
        },
        "isBuff": {
          "type": "boolean",
          "description": "Whether this status effect represents a buff (enhancement) or debuff (enfeeblement). Note that this value is automatically retrieved from game data, so explicitly defining it here is strongly discouraged."
        },
        "maxStacks": {
          "type": "integer",
          "minimum": 0,
          "description": "If the status effect can be stacked, the maximum number of stacks. Note that this value is automatically retrieved from game data, so explicitly defining it here is strongly discouraged."
        },
        "isPlayerSource": {
          "type": "boolean",
          "description": "Whether the status effect originates from a player or an enemy. Note that this value is automatically retrieved from game data, so explicitly defining it here is strongly discouraged."
        }
      },
      "additionalProperties": false
    },
    "StatusType": {
      "type": "string",
      "enum": [
        "dot",
        "vuln",
        "resistance",
        "condition",
        "delay",
        "form",
        "impairment",
        "indicator",
        "rot",
        "rot.pass"
      ]
    },
    "UnprocessedAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "If specified, will use this ID to retrieve additional information about the action from game data. If not specified, will use the key of this action instead.\n\nNote that timeline items and in-text references still use the key of the action to retrieve additional action data.\n\nWhile not necessary, using this field is strongly recommended to \"alias\" actions used in the fight to make the timeline easier to read and maintain."
        },
        "name": {
          "type": "string",
          "description": "Can be used to override the name of the action. Note that the action name is automatically retrieved from game data based on the action ID, so overriding this value is only necessary if there is no game data entry for this action, or when the game data name is incorrect."
        },
        "mechanic": {
          "$ref": "#/definitions/MechanicType",
          "description": "What kind of a mechanic it is. Must be one of the values from `attack-types.yaml`.\n\nAside from being displayed in the timeline, the mechanic type also determines how the mechanic is treated in the mitigation timeline.\n\nIf a mechanic can be one of several types depending on which action is cast, make two actions and link them using `link: or` in the timeline.   If a mechanic can be one of several types but are not distinguished by the action that is cast, prefer to place the damage instances into a `children` list and link them using `link: or`.   If the mechanic has no associated damage instance or linking them in this way is otherwise impossible, consider creating a new entry in `attack-types.yaml`."
        },
        "shape": {
          "$ref": "#/definitions/ShapeType",
          "description": "If the mechanic represents an AoE, what shape that AoE is. Must be one of the values from `mechanic-shapes.yaml`."
        },
        "type": {
          "$ref": "#/definitions/DamageType",
          "description": "The type of damage applied. Must be one of the values from `damage-types.yaml`.\n\nNote that this field is automatically retrieved from game data, so explicitly specifying this field is strongly discouraged.\n\nOnly specify this field for actual *damage instances*, not casts of mechanics that involve damage instances in some way."
        },
        "element": {
          "$ref": "#/definitions/Element",
          "description": "The type of element, if the damage is elemental. Only applicable to magic damage.\n\nNote that this field is automatically retrieved from game data, so explicitly specifying this field is strongly discouraged."
        },
        "damage": {
          "type": "integer",
          "minimum": 0,
          "description": "The amount of damage this attack inflicts *on-content*.\n\nNote that this field only applies to **unavoidable** damage. Damage that is only inflicted as a result of a mistake should *not* receive a damage number here, as this field determines what mechanics are included in the mitigation view for healing and mitigation planning."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the action. Note that, unless there is only one way to solve the mechanic, you should not mention specific strategies here; instead use the `strategies` field for that.\n\nThis description will be shown when users hover over the action name anywhere on the page or when users expand timeline entries that reference this action.\n\nIf a timeline entry referencing this action does not supply its own description, the timeline entry will show the first line of this description in the row, and the rest when expanded. This means that the first line of this description should ideally be short and still make sense in isolation."
        },
        "major": {
          "type": "boolean",
          "const": true,
          "description": "Marks the action as a major mechanic. These actions are highlighted in the, making it easier to find the major actions at a glance."
        },
        "cast": {
          "type": "integer",
          "minimum": 0,
          "description": "The cast time in milliseconds.\n\nNote that this value is automatically retrieved from game data based on the ID, so explicitly defining this field is only necessary if the game data value is wrong.\n\nAlso note that this does not affect the timeline in any way. It is purely used to provide additional information to the user."
        },
        "resolve": {
          "type": "string",
          "description": "Describes how to resolve the mechanic, if it's not obvious from the description.\n\nNote that this should be a **general** description of how to resolve the mechanic and should be independent of any specific strategy used."
        },
        "tips": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of tips on how to deal with the mechanic."
        },
        "mistakes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of common mistakes and how to avoid them."
        },
        "trivia": {
          "type": "string",
          "description": "Some interesting trivia about this action that is ultimately useless to learning the fight itself."
        },
        "strategies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Strategy"
          },
          "description": "A map of unique strategy IDs to concrete strats or mechanical variations that can be used in this mechanic. Note that you can draw diagrams with multiple steps for a strategy under the `graphing` key."
        },
        "children": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/BaseTimelineItem"
              },
              {
                "$ref": "#/definitions/SpecialChildTimelineItem"
              }
            ]
          },
          "description": "\"Sub-mechanics\" that are executed as part of this main mechanic. Child mechanics denoted here are initially hidden and only show up when the parent mechanic is expanded.\n\nNote that the `at` field is interpreted differently from the `at` field in the timeline proper: in the timeline it's interpreted relative to the start of the encounter, whereas this `at` field is interpreted relative to the time the parent action hits (so, generally speaking, `n` milliseconds after the cast)."
        },
        "compact": {
          "$ref": "#/definitions/CompactMode",
          "description": "If set to `trim`, all child timeline items will display directly underneath the parent ability name and will not display a description. As the description column will be empty for all children, the children do not need to be aligned underneath the parent's description. Useful for cases where the parent has a long description and the children merely serve to illustrate the sequence of events, not explain them.\n\nIf set to `full`, the description is still hidden, but the space between child elements is also minimized."
        },
        "count": {
          "type": "integer",
          "minimum": 0,
          "description": "Specifies how many instances of this action come out at the same time. If not specified, defaults to `1` unless overridden in a timeline item."
        },
        "raid-damage": {
          "type": "boolean",
          "description": "Whether the `damage` is *raidwide* damage or not. Used in mitigation calculation. Specifically, if multiple mechanics happen at the same time, the damage is considered cumulative if the attack is marked as raid damage. If it is not, the attack with the highest damge out of all simultaneous attacks is used.\n\nNote that this value is automatically derived from the `mechanic` type. You should specify it only if the action's mechanic type doesn't allow for a definitive conclusion on whether the damage is raidwide damage or not.\n\nAs an example, individual hits of a limit cut mechanic are usually *individual* damage, but not always. You could specify this attribute on limit cut mechanics that *are* raidwide damage to indicate that each limit cut hit needs to be mitigated more strongly, and that the party needs to be healed after each individual hit as opposed to only at the end of the mechanic."
        },
        "icon": {
          "type": "number",
          "description": "The ID of the action icon. This is primarily meant for player actions and is automatically filled from game data in that case. Monster actions do not have icons."
        },
        "isPlayerSource": {
          "type": "boolean",
          "description": "Whether this is a player or enemy action. This value is automatically derived from game data, so explicitly defining this field is strongly discouraged."
        }
      },
      "required": [
        "description"
      ],
      "additionalProperties": false
    },
    "Element": {
      "type": "string",
      "enum": [
        "fire",
        "ice",
        "wind",
        "earth",
        "lightning",
        "water"
      ]
    },
    "Strategy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A human-readable name for the strategy or mechanical variation."
        },
        "description": {
          "type": "string",
          "description": "A description of the strategy or mechanical variation."
        },
        "common": {
          "type": "boolean",
          "const": true,
          "description": "If true, marks this strategy as being common in party finder."
        },
        "recommended": {
          "type": "boolean",
          "const": true,
          "description": "If true, marks this strategy as being recommended."
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "BaseTimelineItem": {
      "type": "object",
      "properties": {
        "at": {
          "type": "integer",
          "minimum": 0,
          "description": "The time in milliseconds relative to the `at` value of the parent ability that this ability *hits*.\n\nA mechanic \"hitting\" is defined as follows:\n\n* If the action inflicts damage or statuses, it's at the time that that   damage and statuses are **snapshot** on the player(s).\n* If the action has a castbar but otherwise has no visible effect, it's   at the end of the castbar."
        },
        "id": {
          "anyOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "string"
            }
          ],
          "description": "The ID of the action executed. Should reference an action listed in `actions`.\n\nIf the boss can cast different variations of this mechanic, use `link: or`."
        },
        "description": {
          "type": "string",
          "description": "A description of the action as it happens at this point in the timeline. If not supplied, will default to the first line in the description of the referenced action."
        },
        "resolve": {
          "type": "string",
          "description": "Describes how to resolve the mechanic, if it's not obvious from the description.\n\nNote that this should be a **general** description of how to resolve the mechanic and should be independent of any specific strategy used.\n\nAlso note that this is automatically derived from the associated action if available."
        },
        "link": {
          "type": "string",
          "enum": [
            "and",
            "or",
            "then"
          ],
          "description": "If this field is specified, this timeline item will be directly connected to the next one with the given link tag. With the exception of `or`, a reader _could_ infer these based on the timestamp of the mechanic, so those values merely serve to place extra emphasis on whatever the value denotes.\n\n| tag    | meaning                                                              | |--------|----------------------------------------------------------------------| | `and`  | This mechanic and the next one occur at the same time.               | | `or`   | The boss may use either this mechanic or the next one, but not both. | | `then` | This mechanic and the next one resolve in rapid succession.          |"
        },
        "mitigation": {
          "$ref": "#/definitions/MitigationMode",
          "description": "If this field is specified, it essentially serves as an override to the `link` type, allowing you to change the way this damage instance flows into the mitigation timeline without altering the way it's displayed.\n\nPossible options are `combine`, which takes the sum of this damage instance and the next, and `max`, which takes the damage value of either this damage instance or the next, whichever is higher.\n\nIf not specified, an `and` link defaults to `combine` and an `or` link defaults to `max`."
        },
        "count": {
          "type": "integer",
          "minimum": 0,
          "description": "Specifies how many instances of this action come out at the same time. Is automatically inherited from the associated `Action` if specified there. If not specified, defaults to `1`."
        },
        "push": {
          "type": "boolean",
          "description": "If true, indicates that the exact timing of this timeline item may vary, as it is based on a *health push*, i.e. it occurs when the health of the enemy or enemies on the field is reduced past a certain threshold and not at a fixed time in the fight."
        },
        "flatten": {
          "type": "boolean",
          "description": "If true, completely hides the element from the timeline and instead only prints its children. Can be used to group a sequence of consecutive actions together that appear in this sequence multiple times in the fight, avoiding the need to write them out each time."
        }
      },
      "required": [
        "at",
        "id"
      ],
      "additionalProperties": false
    },
    "MitigationMode": {
      "type": "string",
      "enum": [
        "combine",
        "max"
      ]
    },
    "SpecialChildTimelineItem": {
      "anyOf": [
        {
          "$ref": "#/definitions/TargetableItem"
        },
        {
          "$ref": "#/definitions/StatusTimelineItem"
        }
      ]
    },
    "TargetableItem": {
      "type": "object",
      "properties": {
        "at": {
          "type": "number",
          "description": "The time in milliseconds relative to the `at` value of the parent ability that this ability *hits*.\n\nA mechanic \"hitting\" is defined as follows:\n\n* If the action inflicts damage or statuses, it's at the time that that   damage and statuses are **snapshot** on the player(s).\n* If the action has a castbar but otherwise has no visible effect, it's   at the end of the castbar.",
          "minimum": 0
        },
        "id": {
          "type": "string",
          "enum": [
            "<targetable>",
            "<untargetable>"
          ]
        }
      },
      "required": [
        "at",
        "id"
      ],
      "additionalProperties": false
    },
    "StatusTimelineItem": {
      "type": "object",
      "properties": {
        "at": {
          "type": "number",
          "description": "The time in milliseconds relative to the `at` value of the parent ability that this ability *hits*.\n\nA mechanic \"hitting\" is defined as follows:\n\n* If the action inflicts damage or statuses, it's at the time that that   damage and statuses are **snapshot** on the player(s).\n* If the action has a castbar but otherwise has no visible effect, it's   at the end of the castbar.",
          "minimum": 0
        },
        "description": {
          "type": "string",
          "description": "A description of the action as it happens at this point in the timeline. If not supplied, will default to the first line in the description of the referenced action."
        },
        "count": {
          "type": "number",
          "description": "Specifies how many instances of this action come out at the same time. Is automatically inherited from the associated `Action` if specified there. If not specified, defaults to `1`."
        },
        "push": {
          "type": "boolean",
          "description": "If true, indicates that the exact timing of this timeline item may vary, as it is based on a *health push*, i.e. it occurs when the health of the enemy or enemies on the field is reduced past a certain threshold and not at a fixed time in the fight."
        },
        "flatten": {
          "type": "boolean",
          "description": "If true, completely hides the element from the timeline and instead only prints its children. Can be used to group a sequence of consecutive actions together that appear in this sequence multiple times in the fight, avoiding the need to write them out each time."
        },
        "id": {
          "type": "string",
          "enum": [
            "<addstatus>",
            "<removestatus>"
          ]
        },
        "status": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      },
      "required": [
        "at",
        "id",
        "status"
      ],
      "additionalProperties": false
    },
    "CompactMode": {
      "type": "string",
      "enum": [
        "full",
        "trim",
        "space"
      ]
    },
    "UnprocessedTimelineItem": {
      "type": "object",
      "properties": {
        "at": {
          "type": "integer",
          "minimum": 0,
          "description": "The time in milliseconds relative to the `at` value of the parent ability that this ability *hits*.\n\nA mechanic \"hitting\" is defined as follows:\n\n* If the action inflicts damage or statuses, it's at the time that that   damage and statuses are **snapshot** on the player(s).\n* If the action has a castbar but otherwise has no visible effect, it's   at the end of the castbar."
        },
        "id": {
          "anyOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "string"
            }
          ],
          "description": "The ID of the action executed. Should reference an action listed in `actions`.\n\nIf the boss can cast different variations of this mechanic, use `link: or`."
        },
        "description": {
          "type": "string",
          "description": "A description of the action as it happens at this point in the timeline. If not supplied, will default to the first line in the description of the referenced action."
        },
        "resolve": {
          "type": "string",
          "description": "Describes how to resolve the mechanic, if it's not obvious from the description.\n\nNote that this should be a **general** description of how to resolve the mechanic and should be independent of any specific strategy used.\n\nAlso note that this is automatically derived from the associated action if available."
        },
        "link": {
          "type": "string",
          "enum": [
            "and",
            "or",
            "then"
          ],
          "description": "If this field is specified, this timeline item will be directly connected to the next one with the given link tag. With the exception of `or`, a reader _could_ infer these based on the timestamp of the mechanic, so those values merely serve to place extra emphasis on whatever the value denotes.\n\n| tag    | meaning                                                              | |--------|----------------------------------------------------------------------| | `and`  | This mechanic and the next one occur at the same time.               | | `or`   | The boss may use either this mechanic or the next one, but not both. | | `then` | This mechanic and the next one resolve in rapid succession.          |"
        },
        "mitigation": {
          "$ref": "#/definitions/MitigationMode",
          "description": "If this field is specified, it essentially serves as an override to the `link` type, allowing you to change the way this damage instance flows into the mitigation timeline without altering the way it's displayed.\n\nPossible options are `combine`, which takes the sum of this damage instance and the next, and `max`, which takes the damage value of either this damage instance or the next, whichever is higher.\n\nIf not specified, an `and` link defaults to `combine` and an `or` link defaults to `max`."
        },
        "count": {
          "type": "integer",
          "minimum": 0,
          "description": "Specifies how many instances of this action come out at the same time. Is automatically inherited from the associated `Action` if specified there. If not specified, defaults to `1`."
        },
        "push": {
          "type": "boolean",
          "description": "If true, indicates that the exact timing of this timeline item may vary, as it is based on a *health push*, i.e. it occurs when the health of the enemy or enemies on the field is reduced past a certain threshold and not at a fixed time in the fight."
        },
        "flatten": {
          "type": "boolean",
          "description": "If true, completely hides the element from the timeline and instead only prints its children. Can be used to group a sequence of consecutive actions together that appear in this sequence multiple times in the fight, avoiding the need to write them out each time."
        },
        "expandable": {
          "type": "boolean",
          "description": "Can be used to override whether the timeline entry should be expandable or not. By default the timeline entry is expandable if the timeline entry and the action both have their own description, or when the timeline references strategies to show."
        }
      },
      "additionalProperties": false,
      "required": [
        "at",
        "id"
      ]
    },
    "SpecialTimelineItem": {
      "anyOf": [
        {
          "$ref": "#/definitions/PhaseShiftItem"
        },
        {
          "$ref": "#/definitions/SpecialChildTimelineItem"
        },
        {
          "$ref": "#/definitions/LoopItem"
        }
      ]
    },
    "PhaseShiftItem": {
      "type": "object",
      "properties": {
        "at": {
          "type": "number",
          "description": "The time in milliseconds relative to the `at` value of the parent ability that this ability *hits*.\n\nA mechanic \"hitting\" is defined as follows:\n\n* If the action inflicts damage or statuses, it's at the time that that   damage and statuses are **snapshot** on the player(s).\n* If the action has a castbar but otherwise has no visible effect, it's   at the end of the castbar.",
          "minimum": 0
        },
        "push": {
          "type": "boolean",
          "description": "If true, indicates that the exact timing of this timeline item may vary, as it is based on a *health push*, i.e. it occurs when the health of the enemy or enemies on the field is reduced past a certain threshold and not at a fixed time in the fight."
        },
        "id": {
          "type": "string",
          "const": "<phase>"
        },
        "name": {
          "type": "string",
          "description": "The full name of the phase. Phases aren't automatically numbered, so if you want to number the phase, add the number to the name here."
        },
        "hp": {
          "type": "number",
          "description": "How much HP the enemy in this phase has. Used to calculate the required DPS. If multiple enemies are fought in this phase, specify the sum total of all their HP values here."
        },
        "maxhp": {
          "type": "number",
          "description": "Some phases don't require you to kill the enemy or enemies but instead only require you to get their health past a certain HP threshold. This HP threshold can be entered here, which will adjust the required DPS accordingly."
        }
      },
      "required": [
        "at",
        "id",
        "name"
      ],
      "additionalProperties": false
    },
    "LoopItem": {
      "type": "object",
      "properties": {
        "at": {
          "type": "number",
          "description": "The time in milliseconds relative to the `at` value of the parent ability that this ability *hits*.\n\nA mechanic \"hitting\" is defined as follows:\n\n* If the action inflicts damage or statuses, it's at the time that that   damage and statuses are **snapshot** on the player(s).\n* If the action has a castbar but otherwise has no visible effect, it's   at the end of the castbar.",
          "minimum": 0
        },
        "description": {
          "type": "string",
          "description": "A description of the action as it happens at this point in the timeline. If not supplied, will default to the first line in the description of the referenced action."
        },
        "id": {
          "type": "string",
          "const": "<loop>"
        }
      },
      "required": [
        "at",
        "id"
      ],
      "additionalProperties": false
    },
    "Macro": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A name for the macro."
        },
        "text": {
          "type": "string",
          "description": "The textual contents of the macro that can be copied and pasted into FFXIV."
        }
      },
      "required": [
        "name",
        "text"
      ],
      "additionalProperties": false
    },
    "Graphing": {
      "type": "object",
      "properties": {
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "Which coordinate system to use. Possible values are 'polar' and 'cartesian'. The coordinate system changes how an element's position is interpreted. Note that the coordinate system can be overridden on a per-element basis. Default is `cartesian`."
        },
        "elements": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ElementDefinition"
          },
          "properties": {
            "boss": {
              "$ref": "#/definitions/DefinitionElementData"
            }
          },
          "description": "An object defining all elements used in any of the graphs. The left-hand side is a unique identifier for the element."
        },
        "graphs": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GraphStep"
            }
          },
          "description": "An object defining the graphs themselves, along with each of their steps. The left-hand side is a unique identifier for the graph that must correspond with a strategy defined on any action within `actions`. The right-hand side is a list of steps, where each step is an object where each key corresponds to an element.\n\nThe first step of each graph defines the elements themselves and their base state. All subsequent steps define a *delta* for each element that changes the element's state compared to the previous step. As a result, **the first step for each graph must include every element you intend to use in later steps**."
        },
        "defs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Def"
          },
          "description": "A list of additional definitions to include in the final SVG, alongside IDs to reference them by."
        }
      },
      "required": [
        "elements",
        "graphs"
      ],
      "additionalProperties": false
    },
    "CoordinateSystem": {
      "type": "string",
      "enum": [
        "polar",
        "cartesian"
      ]
    },
    "DefinitionElementData": {
      "type": "object",
      "properties": {
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "An override for the coordinate system for this element."
        },
        "extrude": {
          "type": "string",
          "description": "The element's extrusion in form of a number specifying the depth of the extrusion and an HTML color string."
        },
        "group": {
          "type": "string",
          "description": "Explicitly sorts this element into a group."
        },
        "planar": {
          "type": "boolean",
          "description": "Whether to render this element as a *planar* element. A planar element is affected by perspective. Default is `true`."
        },
        "shadow": {
          "type": "boolean",
          "description": "Whether the element should drop a shadow."
        }
      },
      "additionalProperties": false
    },
    "PositivePoint": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "number",
          "minimum": 0,
          "title": "x"
        },
        {
          "type": "number",
          "minimum": 0,
          "title": "y"
        }
      ],
      "maxItems": 2
    },
    "Origin": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "title": "x"
        },
        {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "title": "y"
        }
      ],
      "maxItems": 2
    },
    "ElementDefinition": {
      "anyOf": [
        {
          "$ref": "#/definitions/DonutDefinition"
        },
        {
          "$ref": "#/definitions/EllipseDefinition"
        },
        {
          "$ref": "#/definitions/ConeDefinition"
        },
        {
          "$ref": "#/definitions/ImageDefinition"
        },
        {
          "$ref": "#/definitions/RectangleDefinition"
        },
        {
          "$ref": "#/definitions/LinkDefinition"
        },
        {
          "$ref": "#/definitions/PrismDefinition"
        }
      ]
    },
    "DonutDefinition": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "An override for the coordinate system for this element."
        },
        "extrude": {
          "type": "string",
          "description": "The element's extrusion in form of a number specifying the depth of the extrusion and an HTML color string."
        },
        "group": {
          "type": "string",
          "description": "Explicitly sorts this element into a group."
        },
        "planar": {
          "type": "boolean",
          "description": "Whether to render this element as a *planar* element. A planar element is affected by perspective. Default is `true`."
        },
        "shadow": {
          "type": "boolean",
          "description": "Whether the element should drop a shadow."
        },
        "type": {
          "type": "string",
          "const": "donut"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "EllipseDefinition": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "An override for the coordinate system for this element."
        },
        "extrude": {
          "type": "string",
          "description": "The element's extrusion in form of a number specifying the depth of the extrusion and an HTML color string."
        },
        "group": {
          "type": "string",
          "description": "Explicitly sorts this element into a group."
        },
        "planar": {
          "type": "boolean",
          "description": "Whether to render this element as a *planar* element. A planar element is affected by perspective. Default is `true`."
        },
        "shadow": {
          "type": "boolean",
          "description": "Whether the element should drop a shadow."
        },
        "type": {
          "type": "string",
          "const": "ellipse"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "ConeDefinition": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "An override for the coordinate system for this element."
        },
        "extrude": {
          "type": "string",
          "description": "The element's extrusion in form of a number specifying the depth of the extrusion and an HTML color string."
        },
        "group": {
          "type": "string",
          "description": "Explicitly sorts this element into a group."
        },
        "planar": {
          "type": "boolean",
          "description": "Whether to render this element as a *planar* element. A planar element is affected by perspective. Default is `true`."
        },
        "shadow": {
          "type": "boolean",
          "description": "Whether the element should drop a shadow."
        },
        "type": {
          "type": "string",
          "const": "cone"
        },
        "angle": {
          "type": "number"
        },
        "rotation": {
          "type": "number",
          "description": "Specifies an offset from north (in degrees). This is different from the standard property `rotate` in that this field touches the coordinates of the cone directly instead of simply applying a transform."
        }
      },
      "required": [
        "type",
        "angle"
      ],
      "additionalProperties": false
    },
    "ImageDefinition": {
      "type": "object",
      "properties": {
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "An override for the coordinate system for this element."
        },
        "extrude": {
          "type": "string",
          "description": "The element's extrusion in form of a number specifying the depth of the extrusion and an HTML color string."
        },
        "group": {
          "type": "string",
          "description": "Explicitly sorts this element into a group."
        },
        "planar": {
          "type": "boolean",
          "description": "Whether to render this element as a *planar* element. A planar element is affected by perspective. Default is `true`."
        },
        "shadow": {
          "type": "boolean",
          "description": "Whether the element should drop a shadow."
        },
        "type": {
          "type": "string",
          "const": "image"
        },
        "image": {
          "type": "string",
          "description": "A URL to the image to include."
        },
        "shape": {
          "type": "string",
          "enum": [
            "circle",
            "rectangle"
          ],
          "description": "Whether the image should be rendered in full (`rectangle`) or only as a circular cutout."
        }
      },
      "required": [
        "type",
        "image"
      ],
      "additionalProperties": false
    },
    "RectangleDefinition": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "An override for the coordinate system for this element."
        },
        "extrude": {
          "type": "string",
          "description": "The element's extrusion in form of a number specifying the depth of the extrusion and an HTML color string."
        },
        "group": {
          "type": "string",
          "description": "Explicitly sorts this element into a group."
        },
        "planar": {
          "type": "boolean",
          "description": "Whether to render this element as a *planar* element. A planar element is affected by perspective. Default is `true`."
        },
        "shadow": {
          "type": "boolean",
          "description": "Whether the element should drop a shadow."
        },
        "type": {
          "type": "string",
          "const": "rectangle"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "LinkDefinition": {
      "type": "object",
      "properties": {
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "type": {
          "type": "string",
          "const": "link"
        },
        "width": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "PrismDefinition": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "An override for the coordinate system for this element."
        },
        "extrude": {
          "type": "string",
          "description": "The element's extrusion in form of a number specifying the depth of the extrusion and an HTML color string."
        },
        "group": {
          "type": "string",
          "description": "Explicitly sorts this element into a group."
        },
        "planar": {
          "type": "boolean",
          "description": "Whether to render this element as a *planar* element. A planar element is affected by perspective. Default is `true`."
        },
        "shadow": {
          "type": "boolean",
          "description": "Whether the element should drop a shadow."
        },
        "type": {
          "type": "string",
          "const": "prism"
        },
        "depth": {
          "type": "number",
          "description": "The depth of the element."
        }
      },
      "required": [
        "type",
        "depth"
      ],
      "additionalProperties": false
    },
    "GraphStep": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ElementDelta",
        "description": "Each graph step uses as its key one of the unique element IDs defined in `elements` _or_ one of the following predefined IDs: `boss`, `arena`, `enemy`, `T1`, `T2`, `H1`, `H2`, `M1`, `M2`, `R1`, `R2`, `players`, `DPS`, `tanks`, `healers`, `supports`.\n\nThe data then describes a *delta* of all of the properties that should change compared to the previous step. You can either supply an object with element-specific data, or an array with either 2 or 3 numbers. If an array has 2 numbers, it is interpreted as position data. If an array has 3 numbers, it is interpreted as position data + a rotation (in degrees).\n\nYou can add an element type (defined in `elements`) multiple times to the graph by providing an ID unique to that element type within the step data. All of the following variations are valid:\n\n* `ELEMENT_TYPE: DELTA`: The simplest form of a step key. Allows you to add an element type only once.\n* `ELEMENT_TYPE#ELEMENT_ID: DELTA`: A step key followed by a hash and a unique sub-ID. Allows you to add multiple elements   per element type.\n* `ELEMENT_TYPE#PARTIAL_ELEMENT_*_ID: DELTA`: A step key with a unique sub-ID that includes a wildcard (`*`). Allows you to define a delta   for all elements where the sub-ID has any number of characters in place of the wildcard. For instance, `ELEMENT_TYPE#*`   matches *all* elements of a given type. Be aware that only a single wildcard is currently permitted, and only in the element portion   of the ID, not the element type. For more flexibility, use one of the other variations below.\n* `ELEMENT_TYPE#NUMBER..NUMBER: DELTA`: Allows you to define a delta for all elements in the range. For instance,   `my_element#1..3` matches `my_element#1`, `my_element#2`, and `my_element#3`.\n* `ELEMENT_TYPE#PARTIAL_[SUB_ID_1, SUB_ID_2, ...]: DELTA`: The most powerful form of an element key. Allows you to match multiple   elements by composing the element key with comma-separated values inside a bracket expression. Multiple brackets are valid too.   For instance, `my_element#[stack, spread]_[1, 2]` matches `my_element#stack_1`, `my_element#stack_2`, `my_element#spread_1`, and `my_element#spread_2`.\n* `ELEMENT_TYPE#PARTIAL_[NUMBER..NUMBER]: DELTA`: Same as the previous version, but allows you to input a range expression   within the brackets.\n* `ELEMENT_TYPE_1,ELEMENT_TYPE_2: DELTA`: Allows you to match multiple element types. Cannot be used with sub-IDs."
      },
      "properties": {
        "cast": {
          "$ref": "#/definitions/Cast",
          "description": "Allows you to specify a castbar."
        }
      }
    },
    "Cast": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "progress": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "visible": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "ElementDelta": {
      "anyOf": [
        {
          "$ref": "#/definitions/DonutDelta"
        },
        {
          "$ref": "#/definitions/EllipseDelta"
        },
        {
          "$ref": "#/definitions/ConeDelta"
        },
        {
          "$ref": "#/definitions/ImageDelta"
        },
        {
          "$ref": "#/definitions/EnemyDelta"
        },
        {
          "$ref": "#/definitions/RectangleDelta"
        },
        {
          "$ref": "#/definitions/LinkDelta"
        },
        {
          "$ref": "#/definitions/Point"
        },
        {
          "$ref": "#/definitions/CoordinateSystemPoint"
        },
        {
          "$ref": "#/definitions/RotatedPoint"
        }
      ]
    },
    "DonutDelta": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "x": {
          "type": "number",
          "description": "Sets the `x` position."
        },
        "y": {
          "type": "number",
          "description": "Sets the `y` position."
        },
        "attach": {
          "type": [
            "string",
            "null"
          ],
          "description": "Attaches this element to the element with the specified ID. In this case, `x` and `y` are interpreted as offsets."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "Allows you to override the coordinate system used for this step only."
        },
        "w": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the width, not the height, you can use this field instead of `scale`."
        },
        "h": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the height, not the width, you can use this field instead of `scale`."
        },
        "status": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "$ref": "#/definitions/SpecialStatus"
              },
              {
                "$ref": "#/definitions/StatusInfo"
              }
            ]
          },
          "description": "A list of status effect IDs to show."
        },
        "text": {
          "type": "string",
          "description": "Allows you to add some text on top of the element itself."
        }
      }
    },
    "SpecialStatus": {
      "type": "string",
      "enum": [
        "dice-1",
        "dice-2",
        "dice-3",
        "dice-4",
        "dice-5",
        "dice-6",
        "dice-7",
        "dice-8",
        "mark1",
        "mark2",
        "mark3",
        "mark4",
        "mark5",
        "mark6",
        "mark7",
        "mark8",
        "jump",
        "cross",
        "square",
        "circle",
        "triangle"
      ]
    },
    "StatusInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "size": {
          "type": "number"
        }
      },
      "required": [
        "name",
        "description",
        "image"
      ],
      "additionalProperties": false
    },
    "EllipseDelta": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "x": {
          "type": "number",
          "description": "Sets the `x` position."
        },
        "y": {
          "type": "number",
          "description": "Sets the `y` position."
        },
        "attach": {
          "type": [
            "string",
            "null"
          ],
          "description": "Attaches this element to the element with the specified ID. In this case, `x` and `y` are interpreted as offsets."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "Allows you to override the coordinate system used for this step only."
        },
        "w": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the width, not the height, you can use this field instead of `scale`."
        },
        "h": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the height, not the width, you can use this field instead of `scale`."
        },
        "status": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "$ref": "#/definitions/SpecialStatus"
              },
              {
                "$ref": "#/definitions/StatusInfo"
              }
            ]
          },
          "description": "A list of status effect IDs to show."
        },
        "text": {
          "type": "string",
          "description": "Allows you to add some text on top of the element itself."
        }
      }
    },
    "ConeDelta": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "x": {
          "type": "number",
          "description": "Sets the `x` position."
        },
        "y": {
          "type": "number",
          "description": "Sets the `y` position."
        },
        "attach": {
          "type": [
            "string",
            "null"
          ],
          "description": "Attaches this element to the element with the specified ID. In this case, `x` and `y` are interpreted as offsets."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "Allows you to override the coordinate system used for this step only."
        },
        "w": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the width, not the height, you can use this field instead of `scale`."
        },
        "h": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the height, not the width, you can use this field instead of `scale`."
        },
        "status": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "$ref": "#/definitions/SpecialStatus"
              },
              {
                "$ref": "#/definitions/StatusInfo"
              }
            ]
          },
          "description": "A list of status effect IDs to show."
        },
        "text": {
          "type": "string",
          "description": "Allows you to add some text on top of the element itself."
        },
        "rotation": {
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "ImageDelta": {
      "type": "object",
      "properties": {
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "x": {
          "type": "number",
          "description": "Sets the `x` position."
        },
        "y": {
          "type": "number",
          "description": "Sets the `y` position."
        },
        "attach": {
          "type": [
            "string",
            "null"
          ],
          "description": "Attaches this element to the element with the specified ID. In this case, `x` and `y` are interpreted as offsets."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "Allows you to override the coordinate system used for this step only."
        },
        "w": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the width, not the height, you can use this field instead of `scale`."
        },
        "h": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the height, not the width, you can use this field instead of `scale`."
        },
        "status": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "$ref": "#/definitions/SpecialStatus"
              },
              {
                "$ref": "#/definitions/StatusInfo"
              }
            ]
          },
          "description": "A list of status effect IDs to show."
        },
        "text": {
          "type": "string",
          "description": "Allows you to add some text on top of the element itself."
        },
        "image": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "EnemyDelta": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "x": {
          "type": "number",
          "description": "Sets the `x` position."
        },
        "y": {
          "type": "number",
          "description": "Sets the `y` position."
        },
        "attach": {
          "type": [
            "string",
            "null"
          ],
          "description": "Attaches this element to the element with the specified ID. In this case, `x` and `y` are interpreted as offsets."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "Allows you to override the coordinate system used for this step only."
        },
        "w": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the width, not the height, you can use this field instead of `scale`."
        },
        "h": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the height, not the width, you can use this field instead of `scale`."
        },
        "status": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "$ref": "#/definitions/SpecialStatus"
              },
              {
                "$ref": "#/definitions/StatusInfo"
              }
            ]
          },
          "description": "A list of status effect IDs to show."
        },
        "text": {
          "type": "string",
          "description": "Allows you to add some text on top of the element itself."
        }
      }
    },
    "RectangleDelta": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The scale of the element, either as a `[scaleX, scaleY]` array or a single number that specifies the scale on both axes. Can also use `w` or `h` as shorthands if only one axis should be modified."
        },
        "origin": {
          "$ref": "#/definitions/Origin",
          "description": "The origin of the element as relative coordinates between `0` and `1` where `(0.5, 0.5)` would represent the element's center (default). This essentially \"translates\" the element by that value and thus changes the way position and rotation data is interpreted."
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number",
              "minimum": -360,
              "maximum": 360
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The rotation of the element in degrees. If this is a string, it's interpreted as an ID for another element within the same step that this element should \"look at\". Set `null` to keep the previous rotation."
        },
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "size": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ],
          "description": "The initial size of the element. Can either be an array of `[width, height]` or a single number, in which case both width and height will be the same. In subsequent steps, the element's size should only be changed through the `scale` property, otherwise animations won't work."
        },
        "x": {
          "type": "number",
          "description": "Sets the `x` position."
        },
        "y": {
          "type": "number",
          "description": "Sets the `y` position."
        },
        "attach": {
          "type": [
            "string",
            "null"
          ],
          "description": "Attaches this element to the element with the specified ID. In this case, `x` and `y` are interpreted as offsets."
        },
        "coordinate-system": {
          "$ref": "#/definitions/CoordinateSystem",
          "description": "Allows you to override the coordinate system used for this step only."
        },
        "w": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the width, not the height, you can use this field instead of `scale`."
        },
        "h": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the height, not the width, you can use this field instead of `scale`."
        },
        "status": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "$ref": "#/definitions/SpecialStatus"
              },
              {
                "$ref": "#/definitions/StatusInfo"
              }
            ]
          },
          "description": "A list of status effect IDs to show."
        },
        "text": {
          "type": "string",
          "description": "Allows you to add some text on top of the element itself."
        }
      }
    },
    "LinkDelta": {
      "type": "object",
      "properties": {
        "visible": {
          "type": "boolean",
          "description": "Whether the element is currently visible or not. Default is `true`."
        },
        "color": {
          "type": "string",
          "description": "An HTML color string for this element."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "The opacity of the element."
        },
        "description": {
          "type": "string",
          "description": "A description that users can view by hovering over the element."
        },
        "from": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Point"
            }
          ],
          "description": "The element ID to link from."
        },
        "to": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Point"
            }
          ],
          "description": "The element ID to link to."
        },
        "w": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "If you only need to supply a new scale for the width, not the height, you can use this field instead of `scale`."
        },
        "scale": {
          "anyOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/definitions/PositivePoint"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Point": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "number",
          "title": "x"
        },
        {
          "type": "number",
          "title": "y"
        }
      ],
      "maxItems": 2
    },
    "CoordinateSystemPoint": {
      "type": "array",
      "minItems": 3,
      "items": [
        {
          "type": "number",
          "title": "x"
        },
        {
          "type": "number",
          "title": "y"
        },
        {
          "$ref": "#/definitions/CoordinateSystem",
          "title": "coordinateSystem"
        }
      ],
      "maxItems": 3
    },
    "RotatedPoint": {
      "type": "array",
      "minItems": 3,
      "items": [
        {
          "type": "number",
          "title": "x"
        },
        {
          "type": "number",
          "title": "y"
        },
        {
          "type": "number",
          "minimum": -360,
          "maximum": 360,
          "title": "rotation"
        }
      ],
      "maxItems": 3
    },
    "Def": {
      "type": [
        "string"
      ]
    }
  }
}